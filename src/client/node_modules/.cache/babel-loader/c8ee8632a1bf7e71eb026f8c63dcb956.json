{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nexport const useCita = ([cita], callback) => {\n  _s();\n\n  const [editNote, setEditNote] = useState(false);\n  const [nota, setNota] = useState((cita === null || cita === void 0 ? void 0 : cita.nota) || 'No hay notas para esta cita, agrega una!');\n  const [stringEstado, setStringEstado] = useState('');\n  const activeCita = useRef(cita._id);\n  const fecha = new Date(cita === null || cita === void 0 ? void 0 : cita.fechaDeseada).toLocaleDateString(),\n        newFecha = fecha === 'Invalid Date' ? 'No hay citas' : fecha,\n        estado = cita === null || cita === void 0 ? void 0 : cita.estado;\n\n  const handleInputChange = ({\n    target\n  }) => {\n    setNota(target.value);\n  };\n\n  const handleEditClick = () => {\n    setEditNote(!editNote);\n\n    if (editNote) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    if (activeCita.current !== cita._id) {\n      setNota((cita === null || cita === void 0 ? void 0 : cita.nota) || 'No hay notas para esta cita, agrega una!');\n      activeCita.current = cita._id;\n    }\n\n    setStringEstado(getEstadoString(estado));\n  }, [cita, estado]);\n\n  const getEstadoString = estado => estado === 'CANCELADA' ? 'Cancelada' : estado === 'AGENDADA' ? 'Agendada' : estado === 'PENDIENTE' ? 'Pendiente' : estado === 'COMPLETADA' ? 'Completada' : '';\n\n  return [editNote, handleEditClick, nota, handleInputChange, stringEstado, estado, newFecha];\n};\n\n_s(useCita, \"7vp4J1D29CsU+XuKsbDhk4wQyzQ=\");","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/components/hooks/useCita.js"],"names":["useEffect","useRef","useState","useCita","cita","callback","editNote","setEditNote","nota","setNota","stringEstado","setStringEstado","activeCita","_id","fecha","Date","fechaDeseada","toLocaleDateString","newFecha","estado","handleInputChange","target","value","handleEditClick","current","getEstadoString"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,OAAO,GAAG,CAAC,CAACC,IAAD,CAAD,EAASC,QAAT,KAAsB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAAAE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,IAAN,KAAc,0CAAf,CAAhC;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMU,UAAU,GAAGX,MAAM,CAACG,IAAI,CAACS,GAAN,CAAzB;AAEA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,CAASX,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEY,YAAf,EAA6BC,kBAA7B,EAAd;AAAA,QACIC,QAAQ,GAAGJ,KAAK,KAAK,cAAV,GAA4B,cAA5B,GAA6CA,KAD5D;AAAA,QAEIK,MAAM,GAAGf,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEe,MAFnB;;AAIA,QAAMC,iBAAiB,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AACpCZ,IAAAA,OAAO,CAACY,MAAM,CAACC,KAAR,CAAP;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC1BhB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;;AACA,QAAGA,QAAH,EAAY;AACRD,MAAAA,QAAQ;AACX;AACJ,GALD;;AAQAL,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGY,UAAU,CAACY,OAAX,KAAuBpB,IAAI,CAACS,GAA/B,EAAmC;AAC/BJ,MAAAA,OAAO,CAAC,CAAAL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,IAAN,KAAc,0CAAf,CAAP;AACAI,MAAAA,UAAU,CAACY,OAAX,GAAqBpB,IAAI,CAACS,GAA1B;AACH;;AACDF,IAAAA,eAAe,CAACc,eAAe,CAACN,MAAD,CAAhB,CAAf;AACH,GANQ,EAMN,CAACf,IAAD,EAAOe,MAAP,CANM,CAAT;;AASA,QAAMM,eAAe,GAAIN,MAAD,IACpBA,MAAM,KAAK,WAAX,GAAyB,WAAzB,GACAA,MAAM,KAAK,UAAX,GAAwB,UAAxB,GACAA,MAAM,KAAK,WAAX,GAAyB,WAAzB,GACAA,MAAM,KAAK,YAAX,GAA0B,YAA1B,GAAyC,EAJ7C;;AAOA,SAAO,CAAEb,QAAF,EAAYiB,eAAZ,EAA6Bf,IAA7B,EAAmCY,iBAAnC,EAAsDV,YAAtD,EAAoES,MAApE,EAA4ED,QAA5E,CAAP;AAEH,CA1CM;;GAAMf,O","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nexport const useCita = ([cita], callback) => {\n    const [editNote, setEditNote] = useState(false)\n    \n    const [nota, setNota] = useState(cita?.nota || 'No hay notas para esta cita, agrega una!')\n    const [stringEstado, setStringEstado] = useState('')\n\n    const activeCita = useRef(cita._id)\n\n    const fecha = new Date(cita?.fechaDeseada).toLocaleDateString(),\n        newFecha = fecha === 'Invalid Date' ?  'No hay citas' : fecha, \n        estado = cita?.estado\n\n    const handleInputChange = ({target}) => {\n        setNota(target.value)\n    }\n\n    const handleEditClick = () => {\n        setEditNote(!editNote)\n        if(editNote){\n            callback()\n        }\n    }\n\n\n    useEffect(()=> {\n        if(activeCita.current !== cita._id){\n            setNota(cita?.nota || 'No hay notas para esta cita, agrega una!')\n            activeCita.current = cita._id\n        }\n        setStringEstado(getEstadoString(estado))\n    }, [cita, estado])\n    \n\n    const getEstadoString = (estado) => \n        estado === 'CANCELADA' ? 'Cancelada' : \n        estado === 'AGENDADA' ? 'Agendada' : \n        estado === 'PENDIENTE' ? 'Pendiente' : \n        estado === 'COMPLETADA' ? 'Completada' : ''\n    \n\n    return [ editNote, handleEditClick, nota, handleInputChange, stringEstado, estado, newFecha ]\n\n}"]},"metadata":{},"sourceType":"module"}