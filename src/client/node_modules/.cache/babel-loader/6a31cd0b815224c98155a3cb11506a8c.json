{"ast":null,"code":"import { fetchDeleteArchivo, fetchDownloadArchivo, fetchGetArchivosDePacientes, fetchGetCitasDePacientes, fetchGetPacientes, fetchPostFiles, fetchPostPaciente, fetchPutPacientes, fetchSearchPaciente } from '../services/fetch';\nimport { types } from '../types/types';\nimport { startLoadingCitas } from './citas';\nimport { setModalInactivo, setToastActivo } from './ui';\nexport const startSearchingPaciente = searchString => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const resp = await fetchSearchPaciente(token, searchString);\n    const body = await resp.json();\n\n    if (body === null || body === void 0 ? void 0 : body.ok) {\n      dispatch(setToastActivo(body.msg));\n      dispatch(setPacientes(body.pacientes));\n    }\n  };\n};\nexport const startAddingPaciente = paciente => {\n  return async (dispatch, getState) => {\n    const {\n      totalPacientes\n    } = getState().pacientes;\n    const token = localStorage.getItem('token');\n    const resp = await fetchPostPaciente(token, paciente);\n    const body = await resp.json();\n    console.log(totalPacientes);\n\n    if (body === null || body === void 0 ? void 0 : body.ok) {\n      dispatch(setToastActivo(body.msg));\n      dispatch(refreshPaciente(body.createdUser));\n      dispatch(setPacientes([...totalPacientes, body.createdUser]));\n      dispatch(removePacienteActivo());\n      dispatch(setModalInactivo());\n      dispatch(startLoadingCitas());\n    }\n  };\n};\nexport const clearPacientes = () => ({\n  type: types.pacienteClearPacientes\n});\nexport const setCitasPaciente = citas => ({\n  type: types.pacienteSetCitasPaciente,\n  payload: citas\n});\nexport const setArchivosPaciente = archivos => ({\n  type: types.pacienteSetArchivosPaciente,\n  payload: archivos\n});\nexport const startLoadingCitasPaciente = _id => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const response = await fetchGetCitasDePacientes(token, _id);\n    const {\n      ok,\n      citas\n    } = await response.json();\n\n    if (ok) {\n      dispatch(setCitasPaciente(citas));\n    }\n  };\n};\nexport const startLoadingArchivosPaciente = _id => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const response = await fetchGetArchivosDePacientes(_id, token);\n    const {\n      ok,\n      archivos\n    } = await response.json();\n\n    if (ok) {\n      dispatch(setArchivosPaciente(archivos));\n    }\n  };\n};\n\nconst refreshPaciente = paciente => ({\n  type: types.pacientesActualizarPacientes,\n  payload: paciente\n});\n\nexport const startLoadingPacientes = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const response = await fetchGetPacientes(token);\n    const {\n      pacientes\n    } = await response.json();\n    pacientes.length > 0 ? dispatch(setPacientes(pacientes)) : dispatch(setPacientes([]));\n  };\n};\n\nconst setPacientes = pacientes => ({\n  type: types.pacientesSetPacientes,\n  payload: {\n    pacientes: [...pacientes]\n  }\n});\n\nexport const startUpdatePaciente = paciente => {\n  return async (dispatch, getState) => {\n    let {\n      totalPacientes\n    } = getState().pacientes;\n    totalPacientes = totalPacientes.map(v => v._id === paciente._id ? paciente : v);\n    const token = localStorage.getItem('token');\n    const resp = await fetchPutPacientes(token, paciente);\n    const body = await resp.json();\n\n    if (body === null || body === void 0 ? void 0 : body.ok) {\n      dispatch(setToastActivo(body.msg));\n      dispatch(refreshPaciente(paciente));\n      dispatch(setPacientes(totalPacientes));\n    }\n  };\n};\nexport const setPacienteActivo = paciente => ({\n  type: types.pacienteSetPacienteActivo,\n  payload: { ...paciente\n  }\n});\nexport const removePacienteActivo = () => ({\n  type: types.pacienteRemovePacienteActivo\n});\nexport const startUploadingFile = (file, id) => {\n  return async (dispatch, getState) => {\n    const {\n      archivosPorPaciente\n    } = getState().pacientes;\n    const token = localStorage.getItem('token');\n    const data = new FormData();\n    data.append('file', file);\n    const resp = await fetchPostFiles(id, data, token);\n    const {\n      ok,\n      msg,\n      archivo\n    } = await resp.json();\n    console.log(ok);\n    console.log(archivosPorPaciente);\n\n    if (ok) {\n      dispatch(setArchivosPaciente([...archivosPorPaciente, archivo]));\n      dispatch(setToastActivo(msg));\n    }\n  };\n};\nexport const startDeletingFile = (fileId, fileName, pacienteId) => {\n  return async (dispatch, getState) => {\n    let {\n      archivosPorPaciente\n    } = getState().pacientes;\n    archivosPorPaciente = archivosPorPaciente.filter(v => v._id !== fileId);\n    const token = localStorage.getItem('token');\n    const resp = await fetchDeleteArchivo(pacienteId, fileName, token);\n    const body = await resp.json();\n    console.log(archivosPorPaciente);\n\n    if (body === null || body === void 0 ? void 0 : body.ok) {\n      dispatch(setToastActivo(body.msg));\n      dispatch(setArchivosPaciente(archivosPorPaciente));\n    }\n  };\n};\nexport const startDownloadingFile = (fileName, pacienteId) => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const resp = await fetchDownloadArchivo(pacienteId, fileName, token);\n    console.log(resp.body);\n    const blob = await resp.blob();\n    console.log(blob);\n    console.log(`estoy llegando aca`);\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    a.click();\n  };\n};","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/actions/pacientes.js"],"names":["fetchDeleteArchivo","fetchDownloadArchivo","fetchGetArchivosDePacientes","fetchGetCitasDePacientes","fetchGetPacientes","fetchPostFiles","fetchPostPaciente","fetchPutPacientes","fetchSearchPaciente","types","startLoadingCitas","setModalInactivo","setToastActivo","startSearchingPaciente","searchString","dispatch","token","localStorage","getItem","resp","body","json","ok","msg","setPacientes","pacientes","startAddingPaciente","paciente","getState","totalPacientes","console","log","refreshPaciente","createdUser","removePacienteActivo","clearPacientes","type","pacienteClearPacientes","setCitasPaciente","citas","pacienteSetCitasPaciente","payload","setArchivosPaciente","archivos","pacienteSetArchivosPaciente","startLoadingCitasPaciente","_id","response","startLoadingArchivosPaciente","pacientesActualizarPacientes","startLoadingPacientes","length","pacientesSetPacientes","startUpdatePaciente","map","v","setPacienteActivo","pacienteSetPacienteActivo","pacienteRemovePacienteActivo","startUploadingFile","file","id","archivosPorPaciente","data","FormData","append","archivo","startDeletingFile","fileId","fileName","pacienteId","filter","startDownloadingFile","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click"],"mappings":"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","sourcesContent":["import { fetchDeleteArchivo, fetchDownloadArchivo, fetchGetArchivosDePacientes, fetchGetCitasDePacientes, fetchGetPacientes, fetchPostFiles, fetchPostPaciente, fetchPutPacientes, fetchSearchPaciente } from '../services/fetch'\nimport {types} from '../types/types'\nimport { startLoadingCitas } from './citas'\nimport { setModalInactivo, setToastActivo } from './ui'\n\nexport const startSearchingPaciente = (searchString) => {\n    return async (dispatch) => {\n\n        const token = localStorage.getItem('token')\n        const resp = await fetchSearchPaciente(token, searchString)\n        const body = await resp.json()\n        \n        if(body?.ok){\n            dispatch(setToastActivo(body.msg))\n            dispatch(setPacientes(body.pacientes))\n        }\n        \n    }\n}\n\nexport const startAddingPaciente = (paciente) => {\n    return async (dispatch, getState) => {\n        const {totalPacientes} = getState().pacientes\n        const token = localStorage.getItem('token')\n        const resp = await fetchPostPaciente(token, paciente)\n        const body = await resp.json()\n\n        console.log(totalPacientes)\n\n        if(body?.ok){\n            dispatch(setToastActivo(body.msg))\n            dispatch(refreshPaciente(body.createdUser))\n            dispatch(setPacientes([...totalPacientes, body.createdUser]))\n            dispatch(removePacienteActivo())\n            dispatch(setModalInactivo())\n            dispatch(startLoadingCitas())\n        }\n        \n    }\n}\n\nexport const clearPacientes = () => ({type: types.pacienteClearPacientes})\n\nexport const setCitasPaciente = (citas) => ({\n    type: types.pacienteSetCitasPaciente,\n    payload: citas\n})\n\nexport const setArchivosPaciente = (archivos) => ({\n    type: types.pacienteSetArchivosPaciente,\n    payload: archivos\n})\n\nexport const startLoadingCitasPaciente = (_id) => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('token')\n        const response = await fetchGetCitasDePacientes(token, _id)\n        const {ok, citas} = await response.json()\n        if(ok){\n            dispatch(setCitasPaciente(citas))\n        }\n    }\n}\n\nexport const startLoadingArchivosPaciente = (_id) => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('token')\n        const response = await fetchGetArchivosDePacientes(_id, token)\n        const {ok, archivos} = await response.json()\n\n        if(ok){\n            dispatch(setArchivosPaciente(archivos))\n        }\n    }\n}\n\nconst refreshPaciente = (paciente) => ({\n    type: types.pacientesActualizarPacientes,\n    payload: paciente\n})\n\nexport const startLoadingPacientes = () =>{\n    return async dispatch => {\n        const token = localStorage.getItem('token')\n\n        const response = await fetchGetPacientes(token)\n        const {pacientes} = await response.json()\n\n        pacientes.length > 0 ? dispatch(setPacientes(pacientes)) : dispatch(setPacientes([]))\n    }\n}\n\nconst setPacientes = (pacientes) => ({\n    type: types.pacientesSetPacientes,\n    payload:{\n        pacientes: [...pacientes]\n    }\n})\n\nexport const startUpdatePaciente = (paciente) => {\n    return async (dispatch, getState) => {\n\n        let {totalPacientes} = getState().pacientes\n\n        totalPacientes = totalPacientes.map(\n            v => v._id === paciente._id\n            ? paciente\n            : v\n        )\n\n        const token = localStorage.getItem('token')\n        const resp = await fetchPutPacientes(token, paciente)\n        const body = await resp.json()\n\n        if(body?.ok){\n            dispatch(setToastActivo(body.msg))\n            dispatch(refreshPaciente(paciente))\n            dispatch(setPacientes(totalPacientes))\n        }\n        \n    }\n}\n\nexport const setPacienteActivo = (paciente) => ({\n    type: types.pacienteSetPacienteActivo,\n    payload: {...paciente}\n})\n\nexport const removePacienteActivo = () => ({type: types.pacienteRemovePacienteActivo})\n\nexport const startUploadingFile = (file, id) => {\n    return async (dispatch, getState) => {\n\n        const {archivosPorPaciente} = getState().pacientes\n\n        const token = localStorage.getItem('token')\n        const data = new FormData()\n        data.append('file', file)\n\n        const resp = await fetchPostFiles(id, data, token)\n        const {ok, msg, archivo} = await resp.json()\n        console.log(ok)\n        console.log(archivosPorPaciente)\n        if(ok){\n            dispatch(setArchivosPaciente([...archivosPorPaciente, archivo]))\n            dispatch(setToastActivo(msg))\n        }\n    }\n}\n\n\nexport const startDeletingFile = (fileId, fileName,  pacienteId) => {\n    return async (dispatch, getState) => {\n\n        let {archivosPorPaciente} = getState().pacientes\n\n        archivosPorPaciente = archivosPorPaciente.filter(v => v._id !== fileId)\n\n        const token = localStorage.getItem('token')\n        const resp = await fetchDeleteArchivo(pacienteId, fileName, token)\n        const body = await resp.json()\n\n        console.log(archivosPorPaciente)\n\n        if(body?.ok){\n            dispatch(setToastActivo(body.msg))\n            dispatch(setArchivosPaciente(archivosPorPaciente))\n        }\n    }\n}\n\nexport const startDownloadingFile = (fileName,  pacienteId) => {\n    return async (dispatch) => {\n\n        const token = localStorage.getItem('token')\n        const resp = await fetchDownloadArchivo(pacienteId, fileName, token)\n        console.log(resp.body)\n        const blob = await resp.blob()\n\n        console.log(blob)\n        console.log(`estoy llegando aca`)\n\n        let url = window.URL.createObjectURL(blob)\n        let a = document.createElement('a')\n        a.href = url\n        a.download = fileName\n        a.click()\n\n    }\n}"]},"metadata":{},"sourceType":"module"}