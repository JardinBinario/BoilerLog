{"ast":null,"code":"import { types } from '../types/types';\nimport { fetchLogin, fetchValidateJWT } from '../services/fetch';\nimport { setToastActivo } from './ui';\nexport const login = (uid, displayName, rol) => ({\n  type: types.authLogin,\n  payload: {\n    uid,\n    displayName,\n    rol\n  }\n});\nexport const startLogin = ({\n  user,\n  pwd\n}) => {\n  return async dispatch => {\n    const resp = await fetchLogin(user, pwd);\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login(body.uid, body.user, body.rol));\n    } else {\n      dispatch(setToastActivo(body.msg));\n    }\n  };\n};\nexport const startLogout = () => {\n  return async dispatch => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('token-init-date');\n    dispatch(logout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});\nexport const startChecking = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const resp = await fetchValidateJWT(token);\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login(body.uid, body.name, body.rol));\n    } else {\n      dispatch(checkingFinished());\n    }\n  };\n};\nexport const checkingFinished = () => ({\n  type: types.authCheckingFinished\n});","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/actions/auth.js"],"names":["types","fetchLogin","fetchValidateJWT","setToastActivo","login","uid","displayName","rol","type","authLogin","payload","startLogin","user","pwd","dispatch","resp","body","json","ok","localStorage","setItem","token","Date","getTime","msg","startLogout","removeItem","logout","startChecking","getItem","name","checkingFinished","authCheckingFinished"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gBAApB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,mBAA7C;AACA,SAASC,cAAT,QAA+B,MAA/B;AAGA,OAAO,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,MAA4B;AAC7CC,EAAAA,IAAI,EAAER,KAAK,CAACS,SADiC;AAE7CC,EAAAA,OAAO,EAAE;AACLL,IAAAA,GADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA;AAHK;AAFoC,CAA5B,CAAd;AASP,OAAO,MAAMI,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAiB;AACvC,SAAO,MAAOC,QAAP,IAAmB;AACtB,UAAMC,IAAI,GAAG,MAAMd,UAAU,CAACW,IAAD,EAAOC,GAAP,CAA7B;AACA,UAAMG,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;AAEA,QAAGD,IAAI,CAACE,EAAR,EAAW;AACPC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,KAAnC;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAIE,IAAJ,GAAWC,OAAX,EAAxC;AACAT,MAAAA,QAAQ,CAACV,KAAK,CAACY,IAAI,CAACX,GAAN,EAAWW,IAAI,CAACJ,IAAhB,EAAsBI,IAAI,CAACT,GAA3B,CAAN,CAAR;AACH,KAJD,MAIK;AACDO,MAAAA,QAAQ,CAACX,cAAc,CAACa,IAAI,CAACQ,GAAN,CAAf,CAAR;AACH;AAEJ,GAZD;AAaH,CAdM;AAiBP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAO,MAAOX,QAAP,IAAoB;AACvBK,IAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACAP,IAAAA,YAAY,CAACO,UAAb,CAAwB,iBAAxB;AAEAZ,IAAAA,QAAQ,CAACa,MAAM,EAAP,CAAR;AACH,GALD;AAMH,CAPM;AASP,OAAO,MAAMA,MAAM,GAAG,OAAO;AAACnB,EAAAA,IAAI,EAAER,KAAK,CAAC2B;AAAb,CAAP,CAAf;AAGP,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAO,MAAOd,QAAP,IAAoB;AACvB,UAAMO,KAAK,GAAGF,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMd,IAAI,GAAG,MAAMb,gBAAgB,CAACmB,KAAD,CAAnC;AACA,UAAML,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;AAEA,QAAGD,IAAI,CAACE,EAAR,EAAW;AACPC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,KAAnC;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAIE,IAAJ,GAAWC,OAAX,EAAxC;AACAT,MAAAA,QAAQ,CAACV,KAAK,CAACY,IAAI,CAACX,GAAN,EAAWW,IAAI,CAACc,IAAhB,EAAsBd,IAAI,CAACT,GAA3B,CAAN,CAAR;AACH,KAJD,MAIK;AACDO,MAAAA,QAAQ,CAACiB,gBAAgB,EAAjB,CAAR;AACH;AAEJ,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMA,gBAAgB,GAAG,OAAO;AAACvB,EAAAA,IAAI,EAAER,KAAK,CAACgC;AAAb,CAAP,CAAzB","sourcesContent":["import {types} from '../types/types'\nimport { fetchLogin, fetchValidateJWT } from '../services/fetch'\nimport { setToastActivo } from './ui'\n\n\nexport const login = (uid, displayName, rol) => ({\n    type: types.authLogin,\n    payload: {\n        uid,\n        displayName,\n        rol\n    }\n})\n\nexport const startLogin = ({user, pwd}) => {\n    return async (dispatch)=> {\n        const resp = await fetchLogin(user, pwd)\n        const body = await resp.json()\n\n        if(body.ok){\n            localStorage.setItem('token', body.token)\n            localStorage.setItem('token-init-date', new Date().getTime())\n            dispatch(login(body.uid, body.user, body.rol))\n        }else{\n            dispatch(setToastActivo(body.msg))\n        }\n        \n    }\n}\n\n\nexport const startLogout = () => {\n    return async (dispatch) => {\n        localStorage.removeItem('token')\n        localStorage.removeItem('token-init-date')\n\n        dispatch(logout())\n    }\n}\n\nexport const logout = () => ({type: types.logout})\n\n\nexport const startChecking = () => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('token')\n        const resp = await fetchValidateJWT(token)\n        const body = await resp.json()\n\n        if(body.ok){\n            localStorage.setItem('token', body.token)\n            localStorage.setItem('token-init-date', new Date().getTime())\n            dispatch(login(body.uid, body.name, body.rol))\n        }else{\n            dispatch(checkingFinished())\n        }\n\n    }\n}\n\nexport const checkingFinished = () => ({type: types.authCheckingFinished})"]},"metadata":{},"sourceType":"module"}