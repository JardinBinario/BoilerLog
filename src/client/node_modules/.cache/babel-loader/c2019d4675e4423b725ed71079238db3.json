{"ast":null,"code":"// Prod\nconst url = `https://drsmaroto.com`; //staging\n// const url = `https://boiler-log-be.herokuapp.com`\n//dev\n// const url = `http://localhost:3000`\n\nexport const fetchRegister = (email, pwd, name, lastName, user, admin) => fetch(`${url}/new`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    email,\n    pwd,\n    name,\n    lastName,\n    user,\n    admin\n  })\n});\nexport const fetchLogin = (user, pwd) => fetch(`${url}/login`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    user,\n    pwd\n  })\n});\nexport const fetchValidateJWT = token => fetch(`${url}/renew`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchGetCitas = token => fetch(`${url}/citas`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchPutCitas = (token, cita) => fetch(`${url}/citas`, {\n  method: 'PUT',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(cita)\n});\nexport const fetchPostCitas = (token, paciente, horario) => fetch(`${url}/citas`, {\n  method: 'POST',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    paciente,\n    horario\n  })\n});\nexport const fetchDeleteCitas = (token, id) => fetch(`${url}/citas/${id}`, {\n  method: 'DELETE',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchPostPaciente = (token, paciente) => fetch(`${url}/pacientes`, {\n  method: 'POST',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(paciente)\n});\nexport const fetchSearchPaciente = (token, searchString) => fetch(`${url}/pacientes/search/${searchString}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchGetPacientes = token => fetch(`${url}/pacientes`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchGetCitasDePacientes = (token, _id) => fetch(`${url}/citas/paciente/${encodeURIComponent(_id)}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchPutPacientes = (token, paciente) => fetch(`${url}/pacientes`, {\n  method: 'PUT',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(paciente)\n});\nexport const fetchGetHorarios = _id => fetch(`${url}/citas/${_id}`, {\n  method: 'GET'\n});\nexport const fetchGetHorariosByDate = (date, token) => fetch(`${url}/citas/date/${encodeURIComponent(date)}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  }\n});\nexport const fetchPutHorarioCita = (_id, horario) => fetch(`${url}/citas/${_id}`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    horario\n  })\n});\nexport const fetchPostFiles = (_id, file, token) => fetch(`${url}/files/${_id}`, {\n  method: 'POST',\n  headers: {\n    'Authorization': token\n  },\n  body: file\n});\nexport const fetchGetArchivosDePacientes = (_id, token) => fetch(`${url}/files/${_id}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchDeleteArchivo = (_id, name, token) => fetch(`${url}/files/${_id}&${name}`, {\n  method: 'DELETE',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  }\n});\nexport const fetchDownloadArchivo = (_id, name, token) => fetch(`${url}/files/${encodeURI(_id)}&${encodeURI(name)}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token,\n    'Content-Disposition': 'attachment'\n  }\n});\nexport const fetchPostReporte = (reporte, detallesFecha, token) => fetch(`${url}/reportes/${reporte}`, {\n  method: 'POST',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(detallesFecha)\n});\nexport const fetchGetUsers = token => fetch(`${url}/users`, {\n  method: 'GET',\n  headers: {\n    'Authorization': token\n  }\n});\nexport const fetchPutUser = (token, id, update) => fetch(`${url}/users/${id}`, {\n  method: 'POST',\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(update)\n});","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/services/fetch.js"],"names":["url","fetchRegister","email","pwd","name","lastName","user","admin","fetch","method","headers","body","JSON","stringify","fetchLogin","fetchValidateJWT","token","fetchGetCitas","fetchPutCitas","cita","fetchPostCitas","paciente","horario","fetchDeleteCitas","id","fetchPostPaciente","fetchSearchPaciente","searchString","fetchGetPacientes","fetchGetCitasDePacientes","_id","encodeURIComponent","fetchPutPacientes","fetchGetHorarios","fetchGetHorariosByDate","date","fetchPutHorarioCita","fetchPostFiles","file","fetchGetArchivosDePacientes","fetchDeleteArchivo","fetchDownloadArchivo","encodeURI","fetchPostReporte","reporte","detallesFecha","fetchGetUsers","fetchPutUser","update"],"mappings":"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","sourcesContent":["// Prod\nconst url = `https://drsmaroto.com`\n\n//staging\n// const url = `https://boiler-log-be.herokuapp.com`\n\n//dev\n// const url = `http://localhost:3000`\n\nexport const fetchRegister = (email, pwd, name, lastName, user, admin) =>\n\tfetch(`${url}/new`, {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({ email, pwd, name, lastName, user, admin })\n\t})\n\nexport const fetchLogin = (user, pwd) =>\n\tfetch(`${url}/login`, {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({ user, pwd })\n\t})\n\nexport const fetchValidateJWT = (token) =>\n\tfetch(`${url}/renew`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token},\n\t})\n\nexport const fetchGetCitas = (token) =>\n\tfetch(`${url}/citas`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token},\n\t})\n\nexport const fetchPutCitas = (token, cita) =>\n\tfetch(`${url}/citas`, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(cita)\n\t})\n\nexport const fetchPostCitas = (token, paciente, horario) =>\n\tfetch(`${url}/citas`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({paciente, horario})\n\t})\n\n\nexport const fetchDeleteCitas = (token, id) =>\n\tfetch(`${url}/citas/${id}`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t}\n\t})\n\nexport const fetchPostPaciente = (token, paciente) =>\n\tfetch(`${url}/pacientes`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(paciente)\n\t})\n\nexport const fetchSearchPaciente = (token, searchString) =>\n\tfetch(`${url}/pacientes/search/${searchString}`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token}\n\t})\n\nexport const fetchGetPacientes = (token) =>\n\tfetch(`${url}/pacientes`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token}\n\t})\n\nexport const fetchGetCitasDePacientes = (token, _id) =>\n\tfetch(`${url}/citas/paciente/${encodeURIComponent(_id)}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Authorization': token\n\t\t}\n\t})\n\nexport const fetchPutPacientes = (token, paciente) =>\n\tfetch(`${url}/pacientes`, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(paciente)\n\t})\n\nexport const fetchGetHorarios = (_id) =>\n\tfetch(`${url}/citas/${_id}`, {method: 'GET'})\n\nexport const fetchGetHorariosByDate = (date, token) =>\n\tfetch(`${url}/citas/date/${encodeURIComponent(date)}`,\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\n\t\t}\n\t\t)\n\nexport const fetchPutHorarioCita = (_id, horario) =>\n\tfetch(`${url}/citas/${_id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({horario})\n\t\t}\n\t)\n\nexport const fetchPostFiles = (_id, file, token) =>\n\tfetch(`${url}/files/${_id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Authorization': token,\n\t\t\t},\n\t\t\tbody: file\n\t\t}\n\t)\n\nexport const fetchGetArchivosDePacientes = (_id, token) =>\n\tfetch(`${url}/files/${_id}`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token}\n\t})\n\nexport const fetchDeleteArchivo = (_id, name, token) => \n\tfetch(`${url}/files/${_id}&${name}`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'Authorization': token, \n\t\t\t'Content-Type': 'application/json' \n\t\t}\n\t})\n\nexport const fetchDownloadArchivo = (_id, name, token) => \n\tfetch(`${url}/files/${encodeURI(_id)}&${encodeURI(name)}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Disposition': 'attachment'\n\t\t}\n\t})\n\nexport const fetchPostReporte = (reporte, detallesFecha, token) => \n\tfetch(`${url}/reportes/${reporte}`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Authorization': token,\n\t\t\t'Content-Type' : 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(detallesFecha)\n\t})\n\n\nexport const fetchGetUsers = (token) =>\n\tfetch(`${url}/users`, {\n\t\tmethod: 'GET',\n\t\theaders: {'Authorization': token}\n\t})\n\nexport const fetchPutUser = (token, id, update) =>\n\tfetch(`${url}/users/${id}`, {\n\t\tmethod: 'POST',\n\t\theaders: {'Authorization': token, 'Content-Type': 'application/json'},\n\t\tbody: JSON.stringify(update)\n\t})"]},"metadata":{},"sourceType":"module"}