{"ast":null,"code":"import _slicedToArray from\"/home/marceliux/Development/BoilerLog/NodeTask/src/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';export var usePagination=function usePagination(totalPacientes,pacientesPorPagina){var _useState=useState(1),_useState2=_slicedToArray(_useState,2),currentPage=_useState2[0],setCurrentPage=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),maxPage=_useState4[0],setMaxPage=_useState4[1];var indexUltimoPaciente=currentPage*pacientesPorPagina;var indexPrimerPaciente=indexUltimoPaciente-pacientesPorPagina;var currentPacientes=totalPacientes.length>8||pacientesPorPagina===1?totalPacientes.slice(indexPrimerPaciente,indexUltimoPaciente):totalPacientes.slice(0,8);useEffect(function(){var pageNumbers=[];for(var i=1;i<=Math.ceil(totalPacientes.length/pacientesPorPagina);i++){pageNumbers.push(i);setMaxPage(pageNumbers.pop());}},[totalPacientes,pacientesPorPagina,setMaxPage]);var handleChangePage=function handleChangePage(type){switch(type){case\"back\":if(currentPage>1)setCurrentPage(currentPage-1);break;case\"next\":if(currentPage<maxPage)setCurrentPage(currentPage+1);break;default:return;}};return[currentPacientes,currentPage,handleChangePage,maxPage];};","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/components/hooks/usePagination.js"],"names":["useEffect","useState","usePagination","totalPacientes","pacientesPorPagina","currentPage","setCurrentPage","maxPage","setMaxPage","indexUltimoPaciente","indexPrimerPaciente","currentPacientes","length","slice","pageNumbers","i","Math","ceil","push","pop","handleChangePage","type"],"mappings":"gLAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAEC,cAAF,CAAkBC,kBAAlB,CAA0C,eAC7BH,QAAQ,CAAC,CAAD,CADqB,wCAC5DI,WAD4D,eAC/CC,cAD+C,8BAErCL,QAAQ,CAAC,CAAD,CAF6B,yCAE5DM,OAF4D,eAEnDC,UAFmD,eAGnE,GAAMC,CAAAA,mBAAmB,CAAGJ,WAAW,CAAGD,kBAA1C,CACA,GAAMM,CAAAA,mBAAmB,CAAGD,mBAAmB,CAAGL,kBAAlD,CACA,GAAMO,CAAAA,gBAAgB,CAAGR,cAAc,CAACS,MAAf,CAAwB,CAAxB,EAA6BR,kBAAkB,GAAK,CAApD,CACnBD,cAAc,CAACU,KAAf,CAAqBH,mBAArB,CAA0CD,mBAA1C,CADmB,CAEnBN,cAAc,CAACU,KAAf,CAAqB,CAArB,CAAwB,CAAxB,CAFN,CAMAb,SAAS,CAAC,UAAI,CACV,GAAMc,CAAAA,WAAW,CAAG,EAApB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIC,IAAI,CAACC,IAAL,CAAUd,cAAc,CAACS,MAAf,CAAsBR,kBAAhC,CAArB,CAA0EW,CAAC,EAA3E,CAA+E,CAC3ED,WAAW,CAACI,IAAZ,CAAiBH,CAAjB,EACAP,UAAU,CAACM,WAAW,CAACK,GAAZ,EAAD,CAAV,CACH,CACJ,CANQ,CAMN,CAAChB,cAAD,CAAiBC,kBAAjB,CAAqCI,UAArC,CANM,CAAT,CAQA,GAAMY,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAU,CAC/B,OAAQA,IAAR,EACI,IAAK,MAAL,CACI,GAAGhB,WAAW,CAAG,CAAjB,CACIC,cAAc,CAACD,WAAW,CAAC,CAAb,CAAd,CACJ,MACJ,IAAK,MAAL,CACI,GAAIA,WAAW,CAAGE,OAAlB,CACID,cAAc,CAACD,WAAW,CAAC,CAAb,CAAd,CACJ,MACJ,QACI,OAVR,CAYH,CAbD,CAgBA,MAAO,CAACM,gBAAD,CAAmBN,WAAnB,CAAgCe,gBAAhC,CAAkDb,OAAlD,CAAP,CAEH,CArCM","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport const usePagination = ( totalPacientes, pacientesPorPagina ) => {\n    const [currentPage, setCurrentPage] = useState(1)\n    const [maxPage, setMaxPage] = useState(0)\n    const indexUltimoPaciente = currentPage * pacientesPorPagina\n    const indexPrimerPaciente = indexUltimoPaciente - pacientesPorPagina\n    const currentPacientes = totalPacientes.length > 8 || pacientesPorPagina === 1 \n        ? totalPacientes.slice(indexPrimerPaciente, indexUltimoPaciente)\n        : totalPacientes.slice(0, 8)\n    \n\n\n    useEffect(()=>{\n        const pageNumbers = []\n        for (let i = 1; i <= Math.ceil(totalPacientes.length/pacientesPorPagina); i++) {\n            pageNumbers.push(i)\n            setMaxPage(pageNumbers.pop())\n        }\n    }, [totalPacientes, pacientesPorPagina, setMaxPage])\n\n    const handleChangePage = (type) => {\n        switch (type) {\n            case \"back\":\n                if(currentPage > 1)\n                    setCurrentPage(currentPage-1)\n                break;\n            case \"next\":\n                if (currentPage < maxPage)\n                    setCurrentPage(currentPage+1)\n                break;\n            default:\n                return;\n        }\n    }\n\n\n    return [currentPacientes, currentPage, handleChangePage, maxPage]\n\n}"]},"metadata":{},"sourceType":"module"}