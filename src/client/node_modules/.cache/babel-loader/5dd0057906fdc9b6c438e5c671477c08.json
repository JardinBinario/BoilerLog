{"ast":null,"code":"import { fetchPutCitas, fetchGetCitas, fetchPostCitas, fetchDeleteCitas } from '../services/fetch';\nimport { types } from '../types/types';\nimport { setCitasPaciente } from './pacientes';\nimport { setDiaActivo, setToastActivo } from './ui';\nexport const setCitaActiva = cita => ({\n  type: types.citasSetCitaActiva,\n  payload: { ...cita\n  }\n});\nexport const removeCitaActiva = () => ({\n  type: types.citasRemoveCitaActiva\n});\nexport const startUpdateCita = cita => {\n  return async (dispatch, getState) => {\n    const {\n      citasPorPaciente\n    } = getState().pacientes;\n    const {\n      diaActivo\n    } = getState().ui;\n    const newCitas = citasPorPaciente.map(v => v._id === cita._id ? cita : v);\n\n    if (Object.keys(diaActivo).length > 0) {\n      diaActivo.citas = diaActivo.citas.map(val => val._id === cita._id ? cita : val);\n      dispatch(setDiaActivo(diaActivo));\n    }\n\n    const token = localStorage.getItem('token');\n    const resp = await fetchPutCitas(token, cita);\n    const {\n      ok,\n      msg,\n      newCita\n    } = await resp.json();\n\n    if (ok) {\n      dispatch(setToastActivo(msg));\n      dispatch(refreshCitas(newCita));\n      dispatch(setCitasPaciente(newCitas));\n      dispatch(cancelCita());\n    }\n  };\n};\n\nconst refreshCitas = cita => ({\n  type: types.citasActualizarCitas,\n  payload: cita\n});\n\nconst cancelCita = () => ({\n  type: types.citasCancelarCita\n});\n\nexport const startCancelingCita = cita => {\n  return async (dispatch, getState) => {\n    const token = localStorage.getItem('token');\n    const resp = await fetchDeleteCitas(token, cita._id);\n    const {\n      ok,\n      msg,\n      cita: updatedCita\n    } = await resp.json();\n    const {\n      diaActivo\n    } = getState().ui;\n    diaActivo.citas = diaActivo.citas.map(cita => cita._id === updatedCita._id ? updatedCita : cita);\n\n    if (ok) {\n      dispatch(cancelCita());\n      dispatch(setToastActivo(msg));\n      dispatch(refreshCitas(updatedCita));\n      dispatch(setDiaActivo(diaActivo));\n    }\n  };\n};\n\nconst agregarCita = cita => ({\n  type: types.citasAgregarCita,\n  payload: { ...cita\n  }\n});\n\nexport const startAddingCita = (paciente, horario) => {\n  return async (dispatch, getState) => {\n    const token = localStorage.getItem('token');\n    const resp = await fetchPostCitas(token, paciente, horario);\n    const {\n      ok,\n      msg,\n      newCita\n    } = await resp.json();\n    const {\n      diaActivo\n    } = getState().ui;\n\n    if (ok) {\n      diaActivo.citas = [newCita, ...diaActivo.citas];\n      dispatch(setToastActivo(msg));\n      dispatch(agregarCita(newCita));\n      dispatch(setDiaActivo(diaActivo));\n    }\n  };\n};\nexport const clearCitas = () => ({\n  type: types.citasLimpiarCitas\n});\nexport const startLoadingCitas = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    const response = await fetchGetCitas(token);\n    const {\n      citas\n    } = await response.json();\n    citas.length > 0 ? dispatch(setCitas(citas)) : dispatch(setCitas([]));\n  };\n};\nexport const setCitas = citas => ({\n  type: types.citasSetCitas,\n  payload: {\n    citas: [...citas]\n  }\n});","map":{"version":3,"sources":["/home/marceliux/Development/BoilerLog/NodeTask/src/client/src/actions/citas.js"],"names":["fetchPutCitas","fetchGetCitas","fetchPostCitas","fetchDeleteCitas","types","setCitasPaciente","setDiaActivo","setToastActivo","setCitaActiva","cita","type","citasSetCitaActiva","payload","removeCitaActiva","citasRemoveCitaActiva","startUpdateCita","dispatch","getState","citasPorPaciente","pacientes","diaActivo","ui","newCitas","map","v","_id","Object","keys","length","citas","val","token","localStorage","getItem","resp","ok","msg","newCita","json","refreshCitas","cancelCita","citasActualizarCitas","citasCancelarCita","startCancelingCita","updatedCita","agregarCita","citasAgregarCita","startAddingCita","paciente","horario","clearCitas","citasLimpiarCitas","startLoadingCitas","response","setCitas","citasSetCitas"],"mappings":"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","sourcesContent":["import { fetchPutCitas, fetchGetCitas, fetchPostCitas, fetchDeleteCitas } from '../services/fetch'\nimport {types} from '../types/types'\nimport { setCitasPaciente } from './pacientes'\nimport { setDiaActivo, setToastActivo } from './ui'\n\nexport const setCitaActiva = (cita) => ({\n    type: types.citasSetCitaActiva,\n    payload: {\n        ...cita\n    }\n})\n\nexport const removeCitaActiva = () => ({type: types.citasRemoveCitaActiva})\n\nexport const startUpdateCita = (cita) => {\n    return async (dispatch, getState) => {\n\n        const {citasPorPaciente} = getState().pacientes\n        const {diaActivo} = getState().ui\n\n        const newCitas = citasPorPaciente.map(\n            v => v._id === cita._id\n            ? cita\n            : v\n        )\n\n        if(Object.keys(diaActivo).length > 0) {\n            diaActivo.citas = diaActivo.citas.map( val => val._id === cita._id ? cita : val)\n            dispatch(setDiaActivo(diaActivo))\n        }\n\n\n        const token = localStorage.getItem('token')\n        const resp = await fetchPutCitas(token, cita)\n        const {ok, msg, newCita} = await resp.json()\n\n        if(ok){\n            dispatch(setToastActivo(msg))\n            dispatch(refreshCitas(newCita))\n            dispatch(setCitasPaciente(newCitas))\n            dispatch(cancelCita())\n        }\n        \n    }\n}\n\nconst refreshCitas = (cita) => ({\n    type: types.citasActualizarCitas,\n    payload: cita\n})\n\nconst cancelCita = () => ({type: types.citasCancelarCita})\n\n\nexport const startCancelingCita = (cita) => {\n    return async (dispatch, getState) =>{\n        const token = localStorage.getItem('token')\n        const resp = await fetchDeleteCitas(token, cita._id)\n        const {ok, msg, cita: updatedCita} = await resp.json()\n        const {diaActivo} = getState().ui\n\n        diaActivo.citas = diaActivo.citas.map(\n            cita => cita._id === updatedCita._id\n            ? updatedCita\n            : cita\n        )\n                        \n        if(ok){\n            dispatch(cancelCita())\n            dispatch(setToastActivo(msg))\n            dispatch(refreshCitas(updatedCita))\n            dispatch(setDiaActivo(diaActivo))\n        }\n    }\n}\n\nconst agregarCita = (cita) => ({\n    type: types.citasAgregarCita,\n    payload: {\n        ...cita\n    }\n})\n\n\nexport const startAddingCita = (paciente, horario) => {\n    return async (dispatch, getState) =>{\n        const token = localStorage.getItem('token')\n        const resp = await fetchPostCitas(token, paciente, horario)\n        const {ok, msg, newCita} = await resp.json()\n        \n        const {diaActivo} = getState().ui\n\n                \n        if(ok){\n            diaActivo.citas = [newCita, ...diaActivo.citas]\n            dispatch(setToastActivo(msg))\n            dispatch(agregarCita(newCita))\n            dispatch(setDiaActivo(diaActivo))\n        }\n    }\n}\n\nexport const clearCitas = () => ({type: types.citasLimpiarCitas})\n\nexport const startLoadingCitas = () =>{\n    return async dispatch => {\n        const token = localStorage.getItem('token')\n\n        const response = await fetchGetCitas(token)\n        const {citas} = await response.json()\n\n        citas.length > 0 ? dispatch(setCitas(citas)) : dispatch(setCitas([]))\n    }\n}\n\nexport const setCitas = (citas) => ({\n    type: types.citasSetCitas,\n    payload:{\n        citas: [...citas]\n    }\n})\n"]},"metadata":{},"sourceType":"module"}